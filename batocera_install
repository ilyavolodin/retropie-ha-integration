#!/bin/bash
# Batocera-specific installation script (no sudo required) - NOT MEANT TO BE RUN DIRECTLY
# This should only be called from install.sh
# Note: Batocera has Python preinstalled but may not have pip - we use what's available

set -e

# Verify this script is being called from the main installer
if [ -z "$CALLED_FROM_INSTALLER" ]; then
    echo "ERROR: This script should not be run directly."
    echo "       Please run ./install.sh instead."
    exit 1
fi

# Configuration variables are now passed from the main install script
# Only define system-specific paths here
ES_SCRIPTS_DIR="/userdata/system/configs/emulationstation/scripts"
RC_SCRIPTS_DIR="/userdata/system/configs/emulationstation"

# If any of the required variables are not set, exit with an error
if [ -z "$CONFIG_DIR" ] || [ -z "$MQTT_HOST" ] || [ -z "$MQTT_PORT" ]; then
    echo "Error: Required configuration variables not set. Something went wrong with the installer."
    exit 1
fi

# Display banner
echo "============================================="
echo "  Batocera Home Assistant Integration Setup  "
echo "============================================="
echo ""

echo "Installing integration..."

# Check for existing installation and remove it if found
echo "Checking for existing installation..."
# Batocera uses batocera-services for service management
if [ -f /userdata/system/services/batocera_ha.service ]; then
    echo "Stopping existing service if running..."
    # Check if the service is managed by batocera-services
    if batocera-services status batocera_ha >/dev/null 2>&1; then
        echo "Stopping service using batocera-services..."
        batocera-services stop batocera_ha
        batocera-services disable batocera_ha
    else
        # Fallback to kill the process if found
        EXISTING_PID=$(ps aux | grep "[s]tatus_reporter.py" | awk '{print $1}')
        if [ -n "$EXISTING_PID" ]; then
            echo "Killing existing process..."
            kill -9 $EXISTING_PID 2>/dev/null || true
        fi
    fi
    
    echo "Removing existing service file..."
    rm -f /userdata/system/services/batocera_ha.service
    echo "Service file removed."
fi

# Clean up any existing PID file
if [ -f "$CONFIG_DIR/reporter.pid" ]; then
    echo "Cleaning up old PID file..."
    # Check if the process is still running and kill it
    OLD_PID=$(cat "$CONFIG_DIR/reporter.pid")
    if kill -0 $OLD_PID 2>/dev/null; then
        echo "Terminating old process (PID: $OLD_PID)..."
        kill $OLD_PID
    fi
    rm -f "$CONFIG_DIR/reporter.pid"
fi

# Create directories
echo "Creating directories..."
mkdir -p "$CONFIG_DIR" 
mkdir -p "$ES_SCRIPTS_DIR/game-start" "$ES_SCRIPTS_DIR/game-end" "$ES_SCRIPTS_DIR/game-select" "$ES_SCRIPTS_DIR/system-select" "$ES_SCRIPTS_DIR/quit"
mkdir -p "$RC_SCRIPTS_DIR/runcommand-onstart" "$RC_SCRIPTS_DIR/runcommand-onend"

# Python prerequisites and dependencies are now handled in the main install.sh script
echo "Using Python dependencies installed by the main installer."

# We can now directly access PYTHON_PACKAGE_DIR that was set and exported from install.sh

# Check for mosquitto clients
if command -v mosquitto_pub >/dev/null 2>&1; then
    echo "mosquitto-clients are available."
else
    echo "Warning: mosquitto-clients not found. Some MQTT testing features may be unavailable."
    echo "You can install them manually if needed."
fi

# Copy Python scripts
echo "Copying Python scripts..."
cp -f "$(dirname "$0")/src/mqtt_client.py" "$CONFIG_DIR/mqtt_client.py"
cp -f "$(dirname "$0")/src/status_reporter.py" "$CONFIG_DIR/status_reporter.py"
chmod +x "$CONFIG_DIR/mqtt_client.py" "$CONFIG_DIR/status_reporter.py"

# Also create a helper script for manual dependency installation
cat > "$CONFIG_DIR/install_dependencies.sh" << 'EOF'
#!/bin/bash
# Helper script to manually install required dependencies

echo "Installing Python dependencies for Home Assistant integration..."

# Create Python package directory
PYTHON_PACKAGE_DIR="/userdata/system/python"
mkdir -p "$PYTHON_PACKAGE_DIR"

# Install pip if needed
if ! command -v pip3 >/dev/null 2>&1; then
    echo "Installing pip..."
    curl -s -o /tmp/get-pip.py https://bootstrap.pypa.io/get-pip.py
    python3 /tmp/get-pip.py --user
    # Add pip to PATH
    export PATH="$HOME/.local/bin:$PATH"
fi

# Install required packages
if command -v pip3 >/dev/null 2>&1; then
    echo "Installing paho-mqtt..."
    pip3 install --target="$PYTHON_PACKAGE_DIR" paho-mqtt
    echo "Installing watchdog (optional)..."
    pip3 install --target="$PYTHON_PACKAGE_DIR" watchdog || echo "Watchdog installation failed but it's optional."
    
    # Set PYTHONPATH
    export PYTHONPATH="$PYTHON_PACKAGE_DIR:$PYTHONPATH"
    echo "PYTHONPATH set to: $PYTHONPATH"
    
    # Add to .bashrc for future sessions
    if ! grep -q "PYTHONPATH.*$PYTHON_PACKAGE_DIR" "$HOME/.bashrc" 2>/dev/null; then
        echo "export PYTHONPATH=\"$PYTHON_PACKAGE_DIR:\$PYTHONPATH\"" >> "$HOME/.bashrc"
        echo "PYTHONPATH added to .bashrc"
    fi
      echo "Dependencies installed successfully!"
    echo "Restart the service by running: kill $(cat $CONFIG_DIR/reporter.pid) && source $CONFIG_DIR/pythonpath.sh && python3 $CONFIG_DIR/status_reporter.py"
else
    echo "ERROR: pip installation failed. Please try manually."
fi
EOF

chmod +x "$CONFIG_DIR/install_dependencies.sh"

# Copy EmulationStation scripts
echo "Installing EmulationStation scripts..."
cp -f "$(dirname "$0")/scripts/game-start/"* "$ES_SCRIPTS_DIR/game-start/"
cp -f "$(dirname "$0")/scripts/game-end/"* "$ES_SCRIPTS_DIR/game-end/"
cp -f "$(dirname "$0")/scripts/game-select/"* "$ES_SCRIPTS_DIR/game-select/"
cp -f "$(dirname "$0")/scripts/system-select/"* "$ES_SCRIPTS_DIR/system-select/"
cp -f "$(dirname "$0")/scripts/quit/"* "$ES_SCRIPTS_DIR/quit/"
chmod +x "$ES_SCRIPTS_DIR"/*/*.sh

# Copy RunCommand scripts
echo "Installing RunCommand scripts..."
cp -f "$(dirname "$0")/scripts/game-start/"* "$RC_SCRIPTS_DIR/runcommand-onstart/"
cp -f "$(dirname "$0")/scripts/game-end/"* "$RC_SCRIPTS_DIR/runcommand-onend/"
chmod +x "$RC_SCRIPTS_DIR/runcommand-onstart/"* "$RC_SCRIPTS_DIR/runcommand-onend/"*

# Create Batocera-specific hooks
echo "Creating Batocera-specific hooks..."
mkdir -p "$RC_SCRIPTS_DIR/custom.pre.sh.d" "$RC_SCRIPTS_DIR/custom.sh.d"

cat > "$RC_SCRIPTS_DIR/custom.pre.sh.d/01_report_game_start.sh" << 'EOF'
#!/bin/bash
# Log the event
echo "[$(date)] Batocera Game Start: $@" >> /tmp/batocera_events.log
# Call the report script
ES_SCRIPTS_DIR="/userdata/system/configs/emulationstation/scripts"
"$ES_SCRIPTS_DIR/game-start/01_report_game_start.sh" "$@"
EOF

cat > "$RC_SCRIPTS_DIR/custom.sh.d/99_report_game_end.sh" << 'EOF'
#!/bin/bash
# Log the event
echo "[$(date)] Batocera Game End: $@" >> /tmp/batocera_events.log
# Call the report script
ES_SCRIPTS_DIR="/userdata/system/configs/emulationstation/scripts"
"$ES_SCRIPTS_DIR/game-end/01_report_game_end.sh" "$@"
EOF

# Set permissions for Batocera hooks
chmod +x "$RC_SCRIPTS_DIR/custom.pre.sh.d/01_report_game_start.sh" "$RC_SCRIPTS_DIR/custom.sh.d/99_report_game_end.sh"

# Create service file - Batocera uses executable service files
echo "Creating service file..."
SERVICE_NAME="batocera_ha"
SERVICE_DESC="Batocera Home Assistant Integration"

# Create an executable shell script to run as a service
cat > /tmp/${SERVICE_NAME} << 'EOF'
#!/bin/bash
# Batocera Home Assistant Integration Service

# Wait for network to be available
sleep 10

# Source PYTHONPATH and start the reporter
CONFIG_DIR="/userdata/system/batocera_ha"
if [ -f "$CONFIG_DIR/pythonpath.sh" ]; then
    source "$CONFIG_DIR/pythonpath.sh"
    exec python3 "$CONFIG_DIR/status_reporter.py" > /tmp/batocera_ha.log 2>&1 &
    echo $! > "$CONFIG_DIR/reporter.pid"
else
    echo "ERROR: Cannot find $CONFIG_DIR/pythonpath.sh" >&2
    exit 1
fi
EOF

# Replace CONFIG_DIR with the actual value in the script
sed -i "s|/userdata/system/batocera_ha|$CONFIG_DIR|g" /tmp/${SERVICE_NAME}

# Install service using Batocera's service management approach
echo "Installing service..."
mkdir -p /userdata/system/services/
mv /tmp/${SERVICE_NAME} /userdata/system/services/

# Start the service using Batocera's approach
echo "Starting service..."
if batocera-services enable batocera_ha 2>/dev/null; then
    echo "Service enabled via batocera-services"
    batocera-services start batocera_ha
else
    echo "Could not enable service via batocera-services, trying direct start..."
    # Fallback to direct script execution
    echo "Starting service directly..."
    # We'll start it in the background and redirect output
    source $CONFIG_DIR/pythonpath.sh
    nohup python3 $CONFIG_DIR/status_reporter.py > /tmp/batocera_ha.log 2>&1 &
    echo $! > "$CONFIG_DIR/reporter.pid"
    
    # Add to custom.sh to auto-start on boot
    if [ -d "/userdata/system" ]; then
        mkdir -p /userdata/system/custom.sh.d
        cat > "/userdata/system/custom.sh.d/999-start-batocera_ha.sh" << 'EOF'
#!/bin/bash
# Auto-start Home Assistant Integration
CONFIG_DIR="/userdata/system/batocera_ha"
if [ -f "$CONFIG_DIR/pythonpath.sh" ]; then
    source "$CONFIG_DIR/pythonpath.sh"
    nohup python3 "$CONFIG_DIR/status_reporter.py" > /tmp/batocera_ha.log 2>&1 &
    echo $! > "$CONFIG_DIR/reporter.pid"
    echo "Batocera Home Assistant Integration started"
fi
EOF
        chmod +x "/userdata/system/custom.sh.d/999-start-batocera_ha.sh"
    fi
fi

# Verify installation
echo "Verifying installation..."
sleep 2
if pgrep -f "status_reporter.py" > /dev/null; then
    echo "Service is running correctly."
    echo "You can check logs with: cat /tmp/batocera_ha.log"
    echo "If you encounter any issues, you can restart the service with:"
    echo "kill \$(cat $CONFIG_DIR/reporter.pid) 2>/dev/null; source $CONFIG_DIR/pythonpath.sh && python3 $CONFIG_DIR/status_reporter.py > /tmp/batocera_ha.log 2>&1 &"
else
    echo "Service failed to start. Check logs with: cat /tmp/batocera_ha.log"
    echo "Attempting to start service directly..."
    source $CONFIG_DIR/pythonpath.sh
    python3 $CONFIG_DIR/status_reporter.py > /tmp/batocera_ha.log 2>&1 &
    echo $! > "$CONFIG_DIR/reporter.pid"
    echo "Service started directly. Check logs with: cat /tmp/batocera_ha.log"
fi

# Setup RetroArch network commands
echo "Setting up RetroArch Network Commands..."

# Check multiple possible locations for RetroArch config in Batocera
RETROARCH_CFG_LOCATIONS=(
    "/etc/retroarch.cfg"
    "/userdata/system/configs/retroarch/retroarch.cfg"
    "/userdata/system/.config/retroarch/retroarch.cfg"
    "/userdata/system/configs/retroarch/retroarch/retroarch.cfg"
    "/userdata/configs/retroarch/retroarch.cfg"
    "/userdata/retroarch/retroarch.cfg"
)

RETROARCH_CFG=""
for cfg_path in "${RETROARCH_CFG_LOCATIONS[@]}"; do
    if [ -f "$cfg_path" ]; then
        RETROARCH_CFG="$cfg_path"
        echo "Found RetroArch config at: $RETROARCH_CFG"
        break
    fi
done

if [ -n "$RETROARCH_CFG" ]; then
    # Check if we have write permissions to the file
    if [ -w "$RETROARCH_CFG" ]; then
        # Check if network_cmd_enable is already set
        if grep -q "network_cmd_enable" "$RETROARCH_CFG"; then
            # Update existing setting
            sed -i 's/network_cmd_enable = "false"/network_cmd_enable = "true"/g' "$RETROARCH_CFG"
            echo "Updated network_cmd_enable setting to true in $RETROARCH_CFG"
        else
            # Add the setting if it doesn't exist
            echo 'network_cmd_enable = "true"' >> "$RETROARCH_CFG"
            echo "Added network_cmd_enable = true to $RETROARCH_CFG"
        fi
        
        # Optionally set the network command port if you want to use a specific port
        if ! grep -q "network_cmd_port" "$RETROARCH_CFG"; then
            echo 'network_cmd_port = "55355"' >> "$RETROARCH_CFG"
            echo "Added default network_cmd_port = 55355 to $RETROARCH_CFG"
        fi
        
        RETROARCH_ENABLED=true
    else
        echo "WARNING: Found RetroArch config at $RETROARCH_CFG but don't have write permissions."
        
        # Try to create a user-specific config in /userdata which is persistent in Batocera
        USER_CONFIG_DIR="/userdata/system/configs/retroarch"
        echo "Attempting to create a user configuration in $USER_CONFIG_DIR..."
        
        if [ ! -d "$USER_CONFIG_DIR" ]; then
            mkdir -p "$USER_CONFIG_DIR"
        fi
        
        if [ -d "$USER_CONFIG_DIR" ] && [ -w "$USER_CONFIG_DIR" ]; then
            echo "Creating a user-specific RetroArch configuration with network commands enabled..."
            echo 'network_cmd_enable = "true"' > "$USER_CONFIG_DIR/retroarch.cfg"
            echo 'network_cmd_port = "55355"' >> "$USER_CONFIG_DIR/retroarch.cfg"
            echo "Created $USER_CONFIG_DIR/retroarch.cfg with network commands enabled."
            echo "This configuration should be loaded by RetroArch and persist across reboots."
            RETROARCH_ENABLED=true
        else
            echo "Could not create user configuration. To enable RetroArch Network Commands manually, set:"
            echo "network_cmd_enable = \"true\" in a user-specific retroarch.cfg file in /userdata"
            RETROARCH_ENABLED=false
        fi
    fi
else
    echo "WARNING: Could not find RetroArch configuration file in any of the expected locations."
    
    # Create a new configuration file in the user directory
    USER_CONFIG_DIR="/userdata/system/configs/retroarch"
    echo "Creating a new RetroArch configuration in $USER_CONFIG_DIR..."
    
    if [ ! -d "$USER_CONFIG_DIR" ]; then
        mkdir -p "$USER_CONFIG_DIR"
    fi
    
    if [ -d "$USER_CONFIG_DIR" ] && [ -w "$USER_CONFIG_DIR" ]; then
        echo "Creating a new RetroArch configuration with network commands enabled..."
        echo 'network_cmd_enable = "true"' > "$USER_CONFIG_DIR/retroarch.cfg"
        echo 'network_cmd_port = "55355"' >> "$USER_CONFIG_DIR/retroarch.cfg"
        echo "Created $USER_CONFIG_DIR/retroarch.cfg with network commands enabled."
        echo "This configuration should be loaded by RetroArch and persist across reboots."
        RETROARCH_ENABLED=true
    else
        echo "Could not create configuration. To enable RetroArch Network Commands manually, set:"
        echo "network_cmd_enable = \"true\" in a retroarch.cfg file in one of these locations:"
        for cfg_path in "${RETROARCH_CFG_LOCATIONS[@]}"; do
            echo "  - $cfg_path"
        done
        RETROARCH_ENABLED=false
    fi
fi

echo ""
echo "Installation completed successfully!"
echo "The Batocera Home Assistant Integration is now running."
echo ""
echo "To check status: batocera-services status batocera_ha"
echo "To view logs: cat /tmp/batocera_ha.log"
echo "To view integration logs: cat $CONFIG_DIR/batocera_ha.log"
echo ""
echo "Service management commands:"
echo "- Stop service:   batocera-services stop batocera_ha"
echo "- Start service:  batocera-services start batocera_ha"
echo "- Restart:        batocera-services restart batocera_ha"
echo ""
echo "To manually start the service: source $CONFIG_DIR/pythonpath.sh && python3 $CONFIG_DIR/status_reporter.py"
echo ""
echo "Your Batocera system will now report events and status to Home Assistant via MQTT."
echo "Home Assistant should auto-discover the sensors if MQTT integration is configured."